knitr::opts_chunk$set(echo = TRUE)
library(rjags)
dataPath = "D:/datascience/bayesian/"
suppressWarnings(source(paste(dataPath,"DBDA2Eprograms/DBDA2E-utilities.R",sep="/")))
library(rstan)
install.packages(rstan)
install.packages('rstan')
library('rstan')
myData = read.csv(paste0(dataPath,"wk4/MScA_32014_BayesianMethods_CourseProjectData.csv"))
head(myData)
dim(myData)
#positive
sum(myData$y)
(dataList<-list(y=myData$y,Ntotal=length(myData$y)))
y<-myData$y
(Ntotal<-length(y))
unique(myData$sex)
#string
(s<-as.numeric(myData$sex))
(Nsubj=length(unique(s)))
(dataList<-list(y=y,s=s,Ntotal=Ntotal,Nsubj=Nsubj))
unique(myData$sex)
y = as.numeric(myData$y)
s = as.numeric(myData$s) # ensures consecutive integer levels
dim(myData$y)
dim(myData)
sum(myData$y)
#positive
levels(myData$y)
#positive
unique(myData$y)
if ( any( y!=0 & y!=1 ) ) { stop("All y values must be 0 or 1.") }
Ntotal = length(y)
Nsubj = length(unique(s))
# Specify the data in a list, for later shipment to JAGS:
dataList = list(
y = y ,
s = s ,
Ntotal = Ntotal ,
Nsubj = Nsubj
)
# model
modelString = "
data {
}
}
}
"
# Specify the data in a list, for later shipment to JAGS:
dataList = list(
y = y ,
s = s ,
Ntotal = Ntotal ,
Nsubj = Nsubj
)
dataList
head(myData)
s = as.numeric(myData$sex) # ensures consecutive integer levels
Nsubj = length(unique(s))
# Specify the data in a list, for later shipment to JAGS:
dataList = list(
y = y ,
s = s ,
Ntotal = Ntotal ,
Nsubj = Nsubj
)
dataList
modelString = "
data {
int<lower=1> Nsubj ;
int<lower=1> Ntotal ;
int<lower=0,upper=1> y[Ntotal] ;
int<lower=1> s[Ntotal] ; // notice Ntotal not Nsubj
}
parameters {
real<lower=0,upper=1> theta[Nsubj] ; // individual prob correct
real<lower=0,upper=1> omega ;        // group mode
real<lower=0> kappaMinusTwo ;        // group concentration minus two
}
transformed parameters {
real<lower=0> kappa ;
kappa = kappaMinusTwo + 2 ;
}
model {
omega ~ beta( 1 , 1 ) ;
kappaMinusTwo ~ gamma( 0.01 , 0.01 ) ; // mean=1 , sd=10 (generic vague)
// kappaMinusTwo ~ gamma( 1.105125 , 0.1051249 ) ;  # mode=1 , sd=10
theta ~ beta( omega*(kappa-2)+1 , (1-omega)*(kappa-2)+1 ) ; // vectorized
for ( i in 1:Ntotal ) {
y[i] ~ bernoulli( theta[s[i]] ) ;
}
}
" # close quote for modelString
# compile
stanDso <- stan_model( model_code=modelString )
myData = read.csv(paste(datapath,"TherapeuticTouchData.csv",sep="/"))
y = as.numeric(myData$y)
s = as.numeric(myData$s) # ensures consecutive integer levels
# Do some checking that data make sense:
if ( any( y!=0 & y!=1 ) ) { stop("All y values must be 0 or 1.") }
Ntotal = length(y)
Nsubj = length(unique(s))
# Specify the data in a list, for later shipment to JAGS:
dataList = list(
y = y ,
s = s ,
Ntotal = Ntotal ,
Nsubj = Nsubj
)
# THE MODEL.
modelString = "
data {
int<lower=1> Nsubj ;
int<lower=1> Ntotal ;
int<lower=0,upper=1> y[Ntotal] ;
int<lower=1> s[Ntotal] ; // notice Ntotal not Nsubj
}
parameters {
real<lower=0,upper=1> theta[Nsubj] ; // individual prob correct
real<lower=0,upper=1> omega ;        // group mode
real<lower=0> kappaMinusTwo ;        // group concentration minus two
}
transformed parameters {
real<lower=0> kappa ;
kappa = kappaMinusTwo + 2 ;
}
model {
omega ~ beta( 1 , 1 ) ;
kappaMinusTwo ~ gamma( 0.01 , 0.01 ) ; // mean=1 , sd=10 (generic vague)
// kappaMinusTwo ~ gamma( 1.105125 , 0.1051249 ) ;  # mode=1 , sd=10
theta ~ beta( omega*(kappa-2)+1 , (1-omega)*(kappa-2)+1 ) ; // vectorized
for ( i in 1:Ntotal ) {
y[i] ~ bernoulli( theta[s[i]] ) ;
}
}
" # close quote for modelString
Initialize the model.
# INTIALIZE THE CHAINS.
# Initial values of MCMC chains based on data:
initsList = function() {
thetaInit = rep(0,Nsubj)
for ( sIdx in 1:Nsubj ) { # for each subject
includeRows = ( s == sIdx ) # identify rows of this subject
yThisSubj = y[includeRows]  # extract data of this subject
resampledY = sample( yThisSubj , replace=TRUE ) # resample
thetaInit[sIdx] = sum(resampledY)/length(resampledY)
}
thetaInit = 0.001+0.998*thetaInit # keep away from 0,1
meanThetaInit = mean( thetaInit )
kappaInit = 100 # lazy, start high and let burn-in find better value
return( list( theta=thetaInit , omega=meanThetaInit ,
kappaMinusTwo=kappaInit-2 ) )
}
# THE MODEL.
modelString = "
data {
int<lower=1> Nsubj ;
int<lower=1> Ntotal ;
int<lower=0,upper=1> y[Ntotal] ;
int<lower=1> s[Ntotal] ; // notice Ntotal not Nsubj
}
parameters {
real<lower=0,upper=1> theta[Nsubj] ; // individual prob correct
real<lower=0,upper=1> omega ;        // group mode
real<lower=0> kappaMinusTwo ;        // group concentration minus two
}
transformed parameters {
real<lower=0> kappa ;
kappa = kappaMinusTwo + 2 ;
}
model {
omega ~ beta( 1 , 1 ) ;
kappaMinusTwo ~ gamma( 0.01 , 0.01 ) ; // mean=1 , sd=10 (generic vague)
// kappaMinusTwo ~ gamma( 1.105125 , 0.1051249 ) ;  # mode=1 , sd=10
theta ~ beta( omega*(kappa-2)+1 , (1-omega)*(kappa-2)+1 ) ; // vectorized
for ( i in 1:Ntotal ) {
y[i] ~ bernoulli( theta[s[i]] ) ;
}
}
" # close quote for modelString
# THE MODEL.
modelString = "
data {
int<lower=1> Nsubj ;
int<lower=1> Ntotal ;
int<lower=0,upper=1> y[Ntotal] ;
int<lower=1> s[Ntotal] ; // notice Ntotal not Nsubj
}
parameters {
real<lower=0,upper=1> theta[Nsubj] ; // individual prob correct
real<lower=0,upper=1> omega ;        // group mode
real<lower=0> kappaMinusTwo ;        // group concentration minus two
}
transformed parameters {
real<lower=0> kappa ;
kappa = kappaMinusTwo + 2 ;
}
model {
omega ~ beta( 1 , 1 ) ;
kappaMinusTwo ~ gamma( 0.01 , 0.01 ) ; // mean=1 , sd=10 (generic vague)
// kappaMinusTwo ~ gamma( 1.105125 , 0.1051249 ) ;  # mode=1 , sd=10
theta ~ beta( omega*(kappa-2)+1 , (1-omega)*(kappa-2)+1 ) ; // vectorized
for ( i in 1:Ntotal ) {
y[i] ~ bernoulli( theta[s[i]] ) ;
}
}
" # close quote for modelString
# INTIALIZE THE CHAINS.
# Initial values of MCMC chains based on data:
initsList = function() {
thetaInit = rep(0,Nsubj)
for ( sIdx in 1:Nsubj ) { # for each subject
includeRows = ( s == sIdx ) # identify rows of this subject
yThisSubj = y[includeRows]  # extract data of this subject
resampledY = sample( yThisSubj , replace=TRUE ) # resample
thetaInit[sIdx] = sum(resampledY)/length(resampledY)
}
thetaInit = 0.001+0.998*thetaInit # keep away from 0,1
meanThetaInit = mean( thetaInit )
kappaInit = 100 # lazy, start high and let burn-in find better value
return( list( theta=thetaInit , omega=meanThetaInit ,
kappaMinusTwo=kappaInit-2 ) )
# RUN THE CHAINS
parameters = c( "theta","omega","kappa") # The parameters to be monitored
burnInSteps = 500            # Number of steps to burn-in the chains
nChains = 4                  # nChains should be 2 or more for diagnostics
numSavedSteps=50000
thinSteps=1
# Translate to C++ and compile to DSO:
stanDso <- stan_model( model_code=modelString )
}
# INTIALIZE THE CHAINS.
# Initial values of MCMC chains based on data:
initsList = function() {
thetaInit = rep(0,Nsubj)
for ( sIdx in 1:Nsubj ) { # for each subject
includeRows = ( s == sIdx ) # identify rows of this subject
yThisSubj = y[includeRows]  # extract data of this subject
resampledY = sample( yThisSubj , replace=TRUE ) # resample
thetaInit[sIdx] = sum(resampledY)/length(resampledY)
}
thetaInit = 0.001+0.998*thetaInit # keep away from 0,1
meanThetaInit = mean( thetaInit )
kappaInit = 100 # lazy, start high and let burn-in find better value
return( list( theta=thetaInit , omega=meanThetaInit ,
kappaMinusTwo=kappaInit-2 ) )
}
# RUN THE CHAINS
parameters = c( "theta","omega","kappa") # The parameters to be monitored
burnInSteps = 500            # Number of steps to burn-in the chains
nChains = 4                  # nChains should be 2 or more for diagnostics
numSavedSteps=50000
thinSteps=1
# Translate to C++ and compile to DSO:
stanDso <- stan_model( model_code=modelString )
myData = read.csv(paste(datapath,"TherapeuticTouchData.csv",sep="/"))
y = as.numeric(myData$y)
s = as.numeric(myData$s) # ensures consecutive integer levels
# Do some checking that data make sense:
if ( any( y!=0 & y!=1 ) ) { stop("All y values must be 0 or 1.") }
Ntotal = length(y)
Nsubj = length(unique(s))
# Specify the data in a list, for later shipment to JAGS:
dataList = list(
y = y ,
s = s ,
Ntotal = Ntotal ,
Nsubj = Nsubj
)
# THE MODEL.
modelString = "
data {
int<lower=1> Nsubj ;
int<lower=1> Ntotal ;
int<lower=0,upper=1> y[Ntotal] ;
int<lower=1> s[Ntotal] ; // notice Ntotal not Nsubj
}
parameters {
real<lower=0,upper=1> theta[Nsubj] ; // individual prob correct
real<lower=0,upper=1> omega ;        // group mode
real<lower=0> kappaMinusTwo ;        // group concentration minus two
}
transformed parameters {
real<lower=0> kappa ;
kappa = kappaMinusTwo + 2 ;
}
model {
omega ~ beta( 1 , 1 ) ;
kappaMinusTwo ~ gamma( 0.01 , 0.01 ) ; // mean=1 , sd=10 (generic vague)
// kappaMinusTwo ~ gamma( 1.105125 , 0.1051249 ) ;  # mode=1 , sd=10
theta ~ beta( omega*(kappa-2)+1 , (1-omega)*(kappa-2)+1 ) ; // vectorized
for ( i in 1:Ntotal ) {
y[i] ~ bernoulli( theta[s[i]] ) ;
}
}
" # close quote for modelString
# INTIALIZE THE CHAINS.
# Initial values of MCMC chains based on data:
initsList = function() {
thetaInit = rep(0,Nsubj)
for ( sIdx in 1:Nsubj ) { # for each subject
includeRows = ( s == sIdx ) # identify rows of this subject
yThisSubj = y[includeRows]  # extract data of this subject
resampledY = sample( yThisSubj , replace=TRUE ) # resample
thetaInit[sIdx] = sum(resampledY)/length(resampledY)
}
thetaInit = 0.001+0.998*thetaInit # keep away from 0,1
meanThetaInit = mean( thetaInit )
kappaInit = 100 # lazy, start high and let burn-in find better value
return( list( theta=thetaInit , omega=meanThetaInit ,
kappaMinusTwo=kappaInit-2 ) )
}
# RUN THE CHAINS
parameters = c( "theta","omega","kappa") # The parameters to be monitored
burnInSteps = 500            # Number of steps to burn-in the chains
nChains = 4                  # nChains should be 2 or more for diagnostics
numSavedSteps=50000
thinSteps=1
# Translate to C++ and compile to DSO:
stanDso <- stan_model( model_code=modelString )
